package com.example.demo.config;import com.fasterxml.jackson.annotation.JsonAutoDetect;import com.fasterxml.jackson.annotation.PropertyAccessor;import com.fasterxml.jackson.databind.ObjectMapper;import org.springframework.beans.factory.annotation.Value;import org.springframework.cache.CacheManager;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import org.springframework.data.redis.cache.RedisCacheConfiguration;import org.springframework.data.redis.cache.RedisCacheManager;import org.springframework.data.redis.connection.RedisConnectionFactory;import org.springframework.data.redis.connection.RedisPassword;import org.springframework.data.redis.connection.RedisStandaloneConfiguration;import org.springframework.data.redis.connection.jedis.JedisConnectionFactory;import org.springframework.data.redis.core.RedisTemplate;import org.springframework.data.redis.serializer.Jackson2JsonRedisSerializer;import org.springframework.data.redis.serializer.RedisSerializationContext;import org.springframework.data.redis.serializer.StringRedisSerializer;import redis.clients.jedis.JedisPool;import redis.clients.jedis.JedisPoolConfig;import java.time.Duration;/** * @author hjl * @date 2019/7/11 9:56 */@Configurationpublic class RedisConfig {    /**     * 定义 RedisTemplate ，指定序列化和反序列化的处理类     *     * @param factory     * @return     */    @Bean    public RedisTemplate<String, String> redisTemplate(RedisConnectionFactory factory) {        RedisTemplate<String, String> template = new RedisTemplate<>();        template.setConnectionFactory(factory);        Jackson2JsonRedisSerializer<Object> jackson2JsonRedisSerializer = new Jackson2JsonRedisSerializer<>(Object.class);        ObjectMapper om = new ObjectMapper();        om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);        om.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);        jackson2JsonRedisSerializer.setObjectMapper(om);        //序列化 值时使用此序列化方法        //template.setDefaultSerializer(jackson2JsonRedisSerializer);        template.setKeySerializer(new StringRedisSerializer());        template.setValueSerializer(jackson2JsonRedisSerializer);        template.afterPropertiesSet();        return template;    }    @Bean    public CacheManager cacheManager(RedisConnectionFactory factory) {        Jackson2JsonRedisSerializer jackson2JsonRedisSerializer = new Jackson2JsonRedisSerializer(Object.class);        //解决查询缓存转换异常的问题        ObjectMapper om = new ObjectMapper();        om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);        om.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);        jackson2JsonRedisSerializer.setObjectMapper(om);        // 配置序列化（解决乱码的问题）,过期时间30秒        RedisCacheConfiguration config = RedisCacheConfiguration.defaultCacheConfig()                .entryTtl(Duration.ofSeconds(30))                .serializeKeysWith(RedisSerializationContext.SerializationPair.fromSerializer(new StringRedisSerializer()))                .serializeValuesWith(RedisSerializationContext.SerializationPair.fromSerializer(jackson2JsonRedisSerializer))                .disableCachingNullValues();        RedisCacheManager cacheManager = RedisCacheManager.builder(factory)                .cacheDefaults(config)                .build();        return cacheManager;    }    @Bean    public RedisConnectionFactory redisConnectionFactory(JedisPoolConfig jedisPool,                                                         RedisStandaloneConfiguration jedisConfig) {        JedisConnectionFactory connectionFactory = new JedisConnectionFactory(jedisConfig);        connectionFactory.setPoolConfig(jedisPool);        return connectionFactory;    }    @Value("${spring.redis.host:127.0.0.1}")    private String host;    @Value("${spring.redis.port:6379}")    private Integer port;    @Value("${spring.redis.password:}")    private String password;    @Value("${spring.redis.database:0}")    private Integer database;    @Value("${spring.redis.jedis.pool.max-active:100}")    private Integer maxActive;    @Value("${spring.redis.jedis.pool.max-idle:10}")    private Integer maxIdle;    @Value("${spring.redis.jedis.pool.max-wait:3000}")    private Long maxWait;    @Value("${spring.redis.jedis.pool.min-idle:1}")    private Integer minIdle;    @Bean    public JedisPoolConfig jedisPoolConfig() {        JedisPoolConfig jedisPoolConfig = new JedisPoolConfig();        jedisPoolConfig.setMaxIdle(maxIdle);        jedisPoolConfig.setMaxWaitMillis(maxWait);        jedisPoolConfig.setMaxTotal(maxActive);        jedisPoolConfig.setMinIdle(minIdle);        return jedisPoolConfig;    }    @Bean    public RedisStandaloneConfiguration jedisConfig() {        RedisStandaloneConfiguration config = new RedisStandaloneConfiguration();        config.setHostName(host);        config.setPort(port);        config.setDatabase(database);        config.setPassword(RedisPassword.of(password));        return config;    }    @Bean    public JedisPool jedisPool() {        //JedisPool jedisPool = new JedisPool(this.jedisPoolConfig(), host, port, Protocol.DEFAULT_TIMEOUT, password);        JedisPool jedisPool = new JedisPool(this.jedisPoolConfig(), host, port);        return jedisPool;    }}